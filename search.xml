<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>穹仁的博客</title>
    <url>/2021/12/31/1%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>苟日新，日日新，又日新。<br>技术永远都在不断的进步，所以每天要学会更新自己的技术。精益求精才是IT发展的动力。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>File类</title>
    <url>/2022/06/21/File%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="File"><a href="#File" class="headerlink" title="File"></a>File</h1><ul>
<li>File类可以定义文件：进行删除、获取文本本身信息等操作。</li>
<li>但是不能读写文件内容</li>
</ul>
<h3 id="创建file对象"><a href="#创建file对象" class="headerlink" title="创建file对象"></a>创建file对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File f=<span class="keyword">new</span> File（“文件/文件夹/绝对路径/相对路径”）;</span><br></pre></td></tr></table></figure>

<h3 id="路径写法"><a href="#路径写法" class="headerlink" title="路径写法"></a>路径写法</h3><p>1.D:\\abc<br>2.D:/abc<br>3.File.separator（自动获取分隔符）</p>
<h3 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h3><ul>
<li><p>File支持绝对路径和相对路径</p>
<ul>
<li><p>绝对路径：从盘符开始</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File f=<span class="keyword">new</span> File(“D:\\abc\\a.txt”);</span><br></pre></td></tr></table></figure></li>
<li><p>相对路径：不带盘符，默认直接到当前工程下的目录寻找文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File f=<span class="keyword">new</span> File(“模块名\\a.txt”);</span><br></pre></td></tr></table></figure>

<p>相对路径一般定位模块，相对到工程下</p>
</li>
</ul>
</li>
</ul>
<h3 id="常用api"><a href="#常用api" class="headerlink" title="常用api"></a>常用api</h3><ul>
<li><h5 id="判断文件类型、获取文件信息"><a href="#判断文件类型、获取文件信息" class="headerlink" title="判断文件类型、获取文件信息"></a>判断文件类型、获取文件信息</h5><ul>
<li><p>.getAbsolutePath—–获取绝对路径</p>
</li>
<li><p>.getPath——获取文件定义时候的路径</p>
</li>
<li><p>.getName——-获取文件名称，带后缀</p>
</li>
<li><p>.length——-获取文件大小，字节数</p>
</li>
<li><p>.exists———判断文件/文件夹 是否存在</p>
</li>
<li><p>.lastModified—–获取文件最后修改时间，获取的是时间毫秒值</p>
</li>
<li><p>.isFile、.isDirectory—–判断是文件还是文件夹</p>
</li>
</ul>
</li>
<li><h5 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h5><ul>
<li>.createNewFlie—–创建新文件，成功返回true（几乎不用）</li>
<li>.mkdir—-创建一级目录——mkdirs可以创建多级目录</li>
</ul>
</li>
<li><h5 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h5><ul>
<li>.delete—–删除文件    <ul>
<li>占用一样可以删除</li>
<li>只能删除空文件夹</li>
<li>删除不进回收站</li>
</ul>
</li>
</ul>
</li>
<li><h5 id="遍历功能"><a href="#遍历功能" class="headerlink" title="遍历功能"></a>遍历功能</h5><ul>
<li><p>.list</p>
<ul>
<li>获取当前目录下所有<strong>“一级文件名称”</strong>到一个字符串数组中去返回</li>
</ul>
</li>
<li><p>.listFiles</p>
<ul>
<li>（常用）获取当前目录下所有<strong>“一级文件对象”</strong>到一个文件对象数组中去返回</li>
</ul>
</li>
</ul>
</li>
<li><p>listFiles方法注意事项</p>
<ol>
<li>当调用者不存在时，返回null</li>
<li>当调用者是一个文件时，返回null</li>
<li>当调用者是一个空文件夹时，返回一个长度为0的数组</li>
<li>当调用者是一个有内容的文件夹时，将里面所有的文件和文件夹路径放在File数组中返回</li>
<li>当调用者是一个有隐藏文件的文件夹时，将里面所有的文件和文件夹的路径放在File数组中返回，包含隐藏内容</li>
</ol>
</li>
</ul>
<ul>
<li>File类这些方法只能读取一级文件，多级需要通过方法递归</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>File类</category>
      </categories>
      <tags>
        <tag>File类</tag>
      </tags>
  </entry>
  <entry>
    <title>I/O流</title>
    <url>/2022/06/21/IO%E6%B5%81/</url>
    <content><![CDATA[<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><h4 id="文件字节输入流"><a href="#文件字节输入流" class="headerlink" title="文件字节输入流"></a>文件字节输入流</h4><ul>
<li><p>InputStream(抽象类)</p>
<ul>
<li><p>实现类——FileInputStream</p>
</li>
<li><p>```java<br>InputStream is=new FileInputStream(“文件相对路径”);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- #### 每次读取一个字节</span><br><span class="line"></span><br><span class="line">  - .read------读取一个字节返回，每次读取一滴水，读取完毕返回-1</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    int b1=is.read();</span><br><span class="line">    System.out.println((char)b1);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h5 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h5><ul>
<li>性能较慢</li>
<li>读取中文字符输出无法避免乱码情况</li>
</ul>
</li>
<li><h4 id="每次读取一个字节数组"><a href="#每次读取一个字节数组" class="headerlink" title="每次读取一个字节数组"></a>每次读取一个字节<strong>数组</strong></h4><ul>
<li>```java<ul>
<li>byte[] buffer=new byte[读取的字节数];</li>
<li>is.read =is.read(buffer);//可以将这个字节数组当作为水桶<br>String rs =new String(buffer,0,len2)//解码，读取多少倒多少<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 改进使用循环，优化性能</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  byte[] buffer=new byte[3];</span><br><span class="line">  int len;</span><br><span class="line">  while((len=is.read(buffer))!=-1)&#123;</span><br><span class="line">  	System.out.print(new String(buffer,0,len))</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>读取中文字符输出无法避免出现乱码</p>
</li>
</ul>
<ul>
<li><h4 id="每次读取完全部字节"><a href="#每次读取完全部字节" class="headerlink" title="每次读取完全部字节"></a>每次读取完全部字节</h4></li>
<li><p>解决字节流输出中文乱码问题</p>
<ul>
<li><p>方法一：定义的字节数组与文件大小刚刚好一样大</p>
</li>
<li><p>方法二：官方api—-is.readAllBytes();</p>
</li>
</ul>
</li>
<li><p>如果文件过大，定义的字节数组可能会引起内存溢出</p>
</li>
</ul>
<h4 id="文件字节输出流"><a href="#文件字节输出流" class="headerlink" title="文件字节输出流"></a>文件字节输出流</h4><ul>
<li><p>OutputStream(抽象类)</p>
<ul>
<li><p>FileOutputStream(实现类)</p>
</li>
<li><p>```java<br>OutputStream os =new FileOutputStream(“路径”)//没有文件会自动创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- #### 一个字节写入(write方法)</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    os.write(&quot;写入字节&quot;);//默认是写1个字节</span><br><span class="line">    os.flush;//写数据需要刷新</span><br><span class="line">    os.close;//释放资源，包含刷新，关闭后流就不可以使用了</span><br></pre></td></tr></table></figure>

<ul>
<li>因为默认1个，所有直接写入中文会是乱码</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="写入一个字节数组"><a href="#写入一个字节数组" class="headerlink" title="写入一个字节数组"></a>写入一个字节数组</h4><ul>
<li><p>可以通过写入字节数组，将字节数组传入解决</p>
</li>
<li><p>```java<br>byte[] buffer=”中文输入”.getBytes();<br>os.write(buffer);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- #### 写入字节数组的一部分</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    os.write(buffer,0,3);//输入字符数组0-3的内容,按字节计算</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ul>
<li><h4 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h4><ol>
<li>```java<br>os.write(“\r\n”.getBytes());//使用\r\n的兼容性更好<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. 它会先清空之前的数据，写入新数据</span><br><span class="line"></span><br><span class="line">   - 追加文件api</span><br><span class="line"></span><br></pre></td></tr></table></figure>
OutputStream os =new FileOutputStream(“路径”,true)//路径后加true就追加<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 文件拷贝</span><br><span class="line"></span><br><span class="line">1. 创建一个字节输入管道与原文件相通</span><br><span class="line">2. 创建一个字节输出管道与目标文件相通</span><br><span class="line">3. 定义一个字节数组转移数据</span><br><span class="line">4. 关闭流</span><br><span class="line"></span><br><span class="line">- 可以拷贝所有文件</span><br><span class="line"></span><br><span class="line"># 资源释放</span><br><span class="line"></span><br><span class="line">- #### try-catch-finally</span><br><span class="line"></span><br><span class="line">  - 被finally控制的语句最终一定会执行，除非JVM终止</span><br><span class="line">    - 在try外部申明流为空，在内部赋予数值</span><br><span class="line">    - 在finally里面加入两个try-catch对输入与输出流释放，并经行非空校验(if判断)</span><br><span class="line"></span><br><span class="line">  - finally内不要放return，他会抢掉try-catch的return</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- #### try-catch-resouce</span><br><span class="line"></span><br><span class="line">  - try后面放置资源对象，他会自动调用源对象的close方法</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    try(资源对象)&#123;</span><br><span class="line">    //实现Closeable/AutoCloseable接口的类对象才是资源</span><br><span class="line">    &#125;catch&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><h4 id="文件字符输入流"><a href="#文件字符输入流" class="headerlink" title="文件字符输入流"></a>文件字符输入流</h4><ul>
<li><p>Reader(抽象类)</p>
<ul>
<li><p>FileReader(实现类)</p>
</li>
<li><p>```java<br>Reader fr=new FileReader(“路径”);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- #### 每次读取一个字符</span><br><span class="line"></span><br><span class="line">  - .read------读取一个字符返回，每次读取一滴水，读取完毕返回-1</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    int b1=is.read();</span><br><span class="line">    System.out.println((char)b1);</span><br></pre></td></tr></table></figure></li>
<li><p>可以使用循环优化</p>
</li>
</ul>
</li>
<li><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><ul>
<li>性能较慢</li>
<li>读取中文字符不会乱码情况</li>
</ul>
</li>
<li><h4 id="每次读取一个字符数组"><a href="#每次读取一个字符数组" class="headerlink" title="每次读取一个字符数组"></a>每次读取一个字符<strong>数组</strong></h4><ul>
<li>```java<ul>
<li>char[] buffer=new char[读取的字节数];</li>
<li>fr.read =fr.read(buffer);//可以将这个字节数组当作为水桶<br>String rs =new String(buffer,0,len2)//解码，读取多少倒多少<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 改进使用循环，优化性能</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  char[] buffer=new char[3];</span><br><span class="line">  int len;</span><br><span class="line">  while((len=fr.read(buffer))!=-1)&#123;</span><br><span class="line">  	System.out.print(new String(buffer,0,len))</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="文件字符输出流"><a href="#文件字符输出流" class="headerlink" title="文件字符输出流"></a>文件字符输出流</h4><ul>
<li><p>Writer(抽象类)</p>
<ul>
<li><p>FileWriter(实现类)</p>
</li>
<li><p>```java<br>Writer fw =new FileWriter(“路径”);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- #### 一个字符写入(write方法)</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    fw.write(&quot;写入字节&quot;);//默认是写1个字节</span><br><span class="line">    fw.flush;//写数据需要刷新</span><br><span class="line">    fw.close;//释放资源，包含刷新，关闭后流就不可以使用了</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ul>
<li><h4 id="写入一个字符串"><a href="#写入一个字符串" class="headerlink" title="写入一个字符串"></a>写入一个字符串</h4><ul>
<li>```java<br>fw.write(“字符串内容”);<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- #### 写入一个字符数组</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    char[] chars=&quot;字符串内容&quot;.tochatArray();</span><br><span class="line">    fw.write(chars);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="写入字符数组的一部分"><a href="#写入字符数组的一部分" class="headerlink" title="写入字符数组的一部分"></a>写入字符数组的一部分</h4><ul>
<li><pre><code class="java">fw.write(buffer,0,3);//输入字符数组0-3的内容，按字符算
</code></pre>
</li>
</ul>
</li>
</ul>
<h1 id="字节流、字符流如何选择使用"><a href="#字节流、字符流如何选择使用" class="headerlink" title="字节流、字符流如何选择使用"></a>字节流、字符流如何选择使用</h1><ul>
<li>字节流适合做文字的拷贝(音视频，文本)</li>
<li>字节流不适合读取中文内容输出</li>
<li>字符流适合做文本文件的操作(读，写)</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>I/O流</category>
      </categories>
      <tags>
        <tag>I/O流</tag>
      </tags>
  </entry>
  <entry>
    <title>使用VS Code配置c语言环境</title>
    <url>/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>Visual Studio Code（简称“VS Code”）是 Microsoft 在2015年4月30日Build开发者大会上正式宣布一个运行于 Mac OS X、 Windows 和 Linux 之上的，针对于编写现代Web和 云应用 的跨平台源代码编辑器，可在桌面上运行，并且可用于Windows，macOS和Linux。 它具有对 JavaScript，TypeScript 和 Node.js 的内置支持，并具有丰富的其他语言（例如 C++ ， C＃ ， Java ， Python ， PHP ， Go ）和运行时（例如.NET 和 Unity ）扩展的生态系统。</p>
<h2 id="在本章中给出对c语言的环境配置"><a href="#在本章中给出对c语言的环境配置" class="headerlink" title="在本章中给出对c语言的环境配置"></a>在本章中给出对c语言的环境配置</h2><ul>
<li><h3 id="下载软件及运行库"><a href="#下载软件及运行库" class="headerlink" title="下载软件及运行库"></a>下载软件及运行库</h3></li>
</ul>
<ol>
<li><h5 id="首先下载Visual-Studio-Code"><a href="#首先下载Visual-Studio-Code" class="headerlink" title="首先下载Visual Studio Code"></a>首先下载Visual Studio Code</h5><p>官网：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD.jpeg"></p>
</li>
<li><h5 id="下载c语言的gcc运行库（mingw64）"><a href="#下载c语言的gcc运行库（mingw64）" class="headerlink" title="下载c语言的gcc运行库（mingw64）"></a>下载c语言的gcc运行库（mingw64）</h5></li>
</ol>
<p>​    本人在网上下载了好多次运行库，好多都配置不上，不知道是哪个环节出问题了，我哥哥给我的教程，里面的运行库能用而且直接配置成功，我就把他存下来当个宝了。</p>
<pre><code>下载地址—百度网盘：链接：https://pan.baidu.com/s/1BHafnJXhVva-DptQDuxpNw 
</code></pre>
<p>提取码：mybk</p>
<ul>
<li><h3 id="安装软件-解压运行库"><a href="#安装软件-解压运行库" class="headerlink" title="安装软件-解压运行库"></a>安装软件-解压运行库</h3><p>找个你想要安装的盘，这里我选择的是D盘</p>
<p>安装我就省略了，没有什么需要额外设置的，只需要改个安装路径就行了</p>
<p>我的建议是在D盘里新建一个叫做 “ VScode ” 的文件夹</p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9.jpg"></p>
<h4 id="把软件和压缩包都安装-解压到这个文件夹，不用担心会弄混，安装的时候它会自己在这里新建文件夹的——完成之后就是这样的"><a href="#把软件和压缩包都安装-解压到这个文件夹，不用担心会弄混，安装的时候它会自己在这里新建文件夹的——完成之后就是这样的" class="headerlink" title="把软件和压缩包都安装/解压到这个文件夹，不用担心会弄混，安装的时候它会自己在这里新建文件夹的——完成之后就是这样的"></a>把软件和压缩包都安装/解压到这个文件夹，不用担心会弄混，安装的时候它会自己在这里新建文件夹的——完成之后就是这样的</h4><p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/%E6%96%87%E4%BB%B6%E5%AE%8C%E6%88%90.jpg"></p>
</li>
</ul>
<ul>
<li><p>配置环境变量</p>
<p>首先我们打开mingw64目录——打开里面的bin目录</p>
<p>单击上面的地址框，把他复制下来方便我们等会填写环境变量</p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/%E5%A4%8D%E5%88%B6%E8%B7%AF%E5%BE%84.jpg"></p>
<h4 id="右键此电脑—属性—高级系统设置—环境变量"><a href="#右键此电脑—属性—高级系统设置—环境变量" class="headerlink" title="右键此电脑—属性—高级系统设置—环境变量"></a>右键此电脑—属性—高级系统设置—环境变量</h4><p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F01.jpg"></p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F02.jpg"></p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F03.jpg"></p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F04.jpg"></p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F05.jpg"></p>
</li>
</ul>
<p>到这里我们变量已经配置完了该进入软件设置了</p>
<ul>
<li><h2 id="VS-Code插件安装与设置"><a href="#VS-Code插件安装与设置" class="headerlink" title="VS Code插件安装与设置"></a>VS Code插件安装与设置</h2><ol>
<li><p>选择插件的图标</p>
</li>
<li><p>搜索<strong>code runner、c/c++<strong>设置中文的话再加上</strong>chinese</strong></p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/%E6%8F%92%E4%BB%B6%E4%B8%8B%E8%BD%BD01.jpg"></p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/%E6%8F%92%E4%BB%B6%E4%B8%8B%E8%BD%BD02.jpg"></p>
</li>
<li><p>对插件进行设置</p>
<p>选择插件的图标，找到刚才安装好的code runner，右击选择<strong>Extension Settings</strong></p>
<p>往下翻找到图中的选项并勾选。</p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/%E6%8F%92%E4%BB%B6%E8%AE%BE%E7%BD%AE01.jpg"></p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/%E6%8F%92%E4%BB%B6%E8%AE%BE%E7%BD%AE02.jpg"></p>
<p>下载中文插件的小伙伴别忘了重启一下软件</p>
</li>
</ol>
</li>
<li><h2 id="配置c语言所需文件"><a href="#配置c语言所需文件" class="headerlink" title="配置c语言所需文件"></a>配置c语言所需文件</h2></li>
</ul>
<p>在你想要的路径上新建一个文件夹（我在D盘新建了名叫CWORK的文件夹）</p>
<p>使用VS Code打开这个文件夹</p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/c%E9%85%8D%E7%BD%AE01.PNG"></p>
<p>打开这个文件夹之后，软件会重新弹出页面</p>
<ol>
<li><p>选择刚才创建的文件夹名</p>
</li>
<li><p>点击新建文件（New File）</p>
</li>
<li><p>输入hello.c这个.c一定要输上去，因为我们创建的是c文件</p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/c%E9%85%8D%E7%BD%AE02.PNG"></p>
</li>
<li><p>输入代码</p>
<p><code>#include&lt;stdio.h&gt;</code></p>
<p><code>int main()</code></p>
<p><code>&#123;</code></p>
<p>  <code>printf(&quot;hello world&quot;);</code></p>
<p>  <code>return 0;</code></p>
<p><code>&#125;</code></p>
</li>
<li><p>点击终端—配置任务</p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/c%E9%85%8D%E7%BD%AE03.png"></p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/c%E9%85%8D%E7%BD%AE04.png"></p>
<p>在这里VS Code新建了一个.vscode的文件夹，这个文件夹就存放着这些配置文件，不能删除或重命名，选择完成后会自动配置一个tasks.json的文件。</p>
<p>回到“hello.c”文件，右键选择“Run Code”即可运行代码。</p>
<p>运行结果会在下方终端显示</p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/c%E9%85%8D%E7%BD%AE05.png"></p>
</li>
</ol>
<ul>
<li><h2 id="调试代码"><a href="#调试代码" class="headerlink" title="调试代码"></a>调试代码</h2></li>
</ul>
<p>点击运行—启动调试—按照图片选择即可完成json文件的新建</p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/c%E9%85%8D%E7%BD%AE06.png"></p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/c%E9%85%8D%E7%BD%AE07.png"></p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/c%E9%85%8D%E7%BD%AE08.png"></p>
<p>到这里已经配置完了，我们改一下代码，并增加1个断点试一下</p>
<p><code>#include&lt;stdio.h&gt;</code></p>
<p><code>int main()</code></p>
<p><code>&#123;</code>  </p>
<p>  <code>int a,b,sum;</code></p>
<p><code>printf(&quot;Enter two numbers&quot;);</code></p>
<p>  <code>scanf(&quot;%d,%d&quot;,&amp;a,&amp;b);</code></p>
<p>  <code>sum=a+b;</code></p>
<p>  <code>printf(&quot;%d&quot;,sum);</code></p>
<p>  <code>return 0;</code></p>
<p><code>&#125;</code></p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%8100.PNG"></p>
<p>运行到这里我们输入数字</p>
<p>点击单步调试，就会运行下一行代码</p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%8101.PNG"></p>
<p>输入3,4在左侧可以看到a、b的值变化，点击下一步可以看到sum=a+b的值</p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%8102.PNG"></p>
<ul>
<li><h2 id="编码方式"><a href="#编码方式" class="headerlink" title="编码方式"></a>编码方式</h2></li>
</ul>
<p>这个我还没有搞明白，只知道编译器直接如果编码不一致，中文输 入\出 就会出现乱码，我使用VS Code都是使用GBK的编码模式，VS Code修改编码模式也是很简单，就在右下角</p>
<p>这是默认的utf-8的模式</p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/%E7%BC%96%E7%A0%8100.PNG"></p>
<p>中文出现乱码，这种情况我们只需要更改编码模式即可</p>
<ol>
<li><p>找到右下角UTF-8</p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/%E7%BC%96%E7%A0%8101.PNG"></p>
</li>
<li><p>点击选项</p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/%E7%BC%96%E7%A0%8102.PNG"></p>
</li>
<li><p>输入GBK(gbk也可以)</p>
<p><img src="/2021/12/31/VS%20Code%E9%85%8D%E7%BD%AEc%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/%E7%BC%96%E7%A0%8103.PNG"></p>
</li>
</ol>
<ul>
<li><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>到这里整个配置就结束了，配置出现意料之外的问题时，确认步骤没有问题，可以重启软件和电脑试试。我配置好几次基本是没遇到过，里面需要注意的是最好不要随意修改工作文件的路径，否则就会出现无法编译等问题，里面.vscode的文件一定不要改。</p>
<p>在最后配置完成后，新建一个.c文件，打好头文件后，试试直接输入main看看</p>
<h2 id><a href="#" class="headerlink" title></a></h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2></li>
</ul>
<p>​                    知乎教程：<a href="https://zhuanlan.zhihu.com/p/354400717">VS Code配置C语言开发环境的超详细教程 - 知乎 (zhihu.com)</a></p>
]]></content>
      <categories>
        <category>c语言</category>
        <category>配置教程</category>
      </categories>
      <tags>
        <tag>VS Code</tag>
        <tag>c语言</tag>
      </tags>
  </entry>
  <entry>
    <title>方法递归</title>
    <url>/2016/10/12/%E6%96%B9%E6%B3%95%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<h1 id="方法递归"><a href="#方法递归" class="headerlink" title="方法递归"></a>方法递归</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul>
<li>方法直接调用自己或间接调用自己的形式称为方法递归（recursion）</li>
<li>递归作为一种算法在程序设计语言中广泛应用</li>
</ul>
<h3 id="递归的形式"><a href="#递归的形式" class="headerlink" title="递归的形式"></a>递归的形式</h3><ul>
<li>直接递归：方法自己调用自己</li>
<li>间接递归：方法调用其他方法，其他方法又回调方法自己</li>
</ul>
<h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><ul>
<li>如果没有控制好终止，就会出现递归死循环，导致栈内存溢出</li>
</ul>
<h3 id="递归算法的三大要素"><a href="#递归算法的三大要素" class="headerlink" title="递归算法的三大要素"></a>递归算法的三大要素</h3><ol>
<li>递归的公式：f(n)=f(n-1)*n</li>
<li>递归的终结点：f(1)</li>
<li>递归的方向必须走向终结点</li>
</ol>
<h3 id="使用递归做文件搜索"><a href="#使用递归做文件搜索" class="headerlink" title="使用递归做文件搜索"></a>使用递归做文件搜索</h3><ul>
<li>需求<ul>
<li>文件搜索，从盘中找出某个文件名称并输出绝对路径</li>
</ul>
</li>
<li>分析：<ol>
<li>先定位出的应该是一级文件对象</li>
<li>遍历全部一级文件对象，判断是否是文件</li>
<li>如果是文件，判断是否是自己想要的</li>
<li>如果是文件夹，需要继续递归进去重复上述过程</li>
</ol>
</li>
</ul>
<h1 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h1><ul>
<li>GBK集<ul>
<li>在GBK编码中，英文数字占1个字节，中文占2个字节</li>
</ul>
</li>
<li>UTF-8集<ul>
<li>UTF-8中，英文数字占1个字节，中文占3个字节</li>
</ul>
</li>
<li>英文数字在存储中为正数，而中文在存储中为负数</li>
</ul>
<h3 id="编码与解码"><a href="#编码与解码" class="headerlink" title="编码与解码"></a>编码与解码</h3><ul>
<li><p>编码</p>
<ul>
<li><p>.getBytes——-以默认字符集进行编码，返回Bytes数组以接受</p>
<ul>
<li>```java<br>byte[]  bytes=name.getBytes();//括号中可直接指定编码格式<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 解码</span><br><span class="line"></span><br><span class="line">  - 编码前和编码后的字符集必须一致，否则乱码</span><br><span class="line"></span><br><span class="line">  - String(bytes);</span><br><span class="line"></span><br><span class="line">    - String rs = new String(bytes);</span><br><span class="line"></span><br><span class="line">      - ```java</span><br><span class="line">        String rs = new String(bytes，&quot;编码格式&quot;);//进行指定编码解码</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>方法递归</category>
      </categories>
      <tags>
        <tag>方法递归</tag>
      </tags>
  </entry>
</search>
